/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        capsword: capsword {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSWORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS>;
        };

        homeRowMod: homeRowMod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROWMOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <13 14 15 20 21 22 16 19>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <300>;
            hold-trigger-on-release;
        };

        layerchangehold: layerchangehold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERCHANGEHOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <17 18 36 37 38 39 40 41 24 35>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <300>;
        };

        parang_right: parang_right {
            compatible = "zmk,behavior-mod-morph";
            label = "PARANG_RIGHT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        parang_left: parang_left {
            compatible = "zmk,behavior-mod-morph";
            label = "PARANG_LEFT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Querty {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE       &kp Q               &kp W                   &kp E                      &kp R                         &kp T                   &kp Y                 &kp U                      &kp I                &kp O                    &kp P                       &kp MINUS
&caps_word      &homeRowMod A LGUI  &homeRowMod S LEFT_ALT  &homeRowMod D LCTRL        &homeRowMod LSHIFT F          &layerchangehold 2 G    &layerchangehold 1 H  &homeRowMod J RIGHT_SHIFT  &homeRowMod K RCTRL  &homeRowMod L RIGHT_ALT  &homeRowMod SEMI RIGHT_GUI  &kp SQT
&kp LEFT_SHIFT  &kp Z               &kp X                   &kp C                      &kp V                         &kp B                   &kp N                 &kp M                      &kp COMMA            &kp DOT                  &kp FSLH                    &kp ESC
                                                            &layerchangehold 3 ESCAPE  &layerchangehold 5 BACKSPACE  &kp DEL                 &kp TAB               &layerchangehold 6 SPACE   &kp RET
            >;
        };

        HoldingKeyLeft {
            bindings = <
&trans  &trans  &trans  &trans   &trans         &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &kp S   &kp D    &kp F          &kp G      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans         &trans     &trans  &trans  &trans  &trans  &trans  &trans
                        &kp ESC  &kp BACKSPACE  &kp DEL    &trans  &trans  &trans
            >;
        };

        HoldingKeyRight {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans     &trans   &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp H    &kp J      &kp K    &kp L   &kp SEMI  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans     &trans   &trans  &trans    &trans
                        &trans  &trans  &trans    &kp TAB  &kp SPACE  &kp RET
            >;
        };

        movementLayer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        GamingLayer {
            bindings = <
&kp TAB    &kp T  &kp Q  &kp W    &kp E      &kp R       &trans  &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp G  &kp A  &kp S    &kp D      &kp F       &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp B  &kp Z  &kp X    &kp C      &kp V       &trans  &trans  &trans  &trans  &trans  &trans
                         &kp ESC  &kp SPACE  &kp BSLH    &to 0   &trans  &trans
            >;
        };

        NumberLayer {
            bindings = <
&none  &none          &kp PIPE          &kp CARET          &none          &kp K    &kp LS(PRCNT)  &kp N7   &kp N8  &kp N9  &kp SEMI   &none
&none  &kp LGUI       &kp LALT          &kp LCTRL          &kp LSHFT      &kp J    &kp PLUS       &kp N4   &kp N5  &kp N6  &kp MINUS  &none
&none  &parang_right  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &parang_right  &kp G    &kp STAR       &kp N1   &kp N2  &kp N3  &kp FSLH   &none
                                        &none              &tog 5         &none    &kp EQUAL      &kp DOT  &kp N0
            >;
        };

        simbolsLayer {
            bindings = <
&kp LS(EXCL)   &kp LS(LPAR)   &kp SQT    &kp BSLH       &kp LS(RPAR)   &kp COMMA       &kp RET    &kp BSPC   &kp DEL    &none     &none     &none
&kp LS(POUND)  &kp LS(CARET)  &kp EQUAL  &kp MINUS      &kp LS(DLLR)   &kp LS(STAR)    &kp SPACE  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&kp LS(AT)     &parang_left   &kp LBKT   &kp RBKT       &parang_right  &kp DOT         &kp TAB    &kp W      &kp B      &none     &none     &none
                                         &kp LS(PRCNT)  &kp LS(COLON)  &kp SEMI        &to 0      &none      &none
            >;
        };

        LowerLayer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        MagicLayer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };
    };
};
